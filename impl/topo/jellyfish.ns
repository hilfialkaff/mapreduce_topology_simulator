# Input Emulab definitions
source tb_compat.tcl

# Create the simulator object
set ns [new Simulator]

array set hosts {}
array set switches {}
array set open_ports {}

set num_ports 4
set num_hosts 8
set num_switches 14
set links_to [list]
set links_from [list]
set links_storage [list]
set switches_left $num_switches

set consec_fails 0
set link_counter 0

proc setup_node {node_id} {
    # tb-set-hardware $node_id pc850
    tb-set-node-os $node_id UBUNTU10-STD
    tb-set-node-startup $node_id "/proj/uiucnet/exp/tomography/src/_init.sh"

    # equivalent to "mkextrafs /mnt/extra" on node i.
    # set bs($p) [$ns blockstore]
    # $bs($p) set-class "local"
    # $bs($p) set-size "100GB"
    # $bs($p) set-placement "nonsysvol"
    # $bs($p) set-mount-point "/mnt/extra"
    # $bs($p) set-node $client($p)

}

for {set h 1} {$h <= $num_hosts} {incr h} {
    set hosts($h) [$ns node]
    setup_node $hosts($h)
}

for {set s 1} {$s <= $num_switches} {incr s} {
    set switches($s) [$ns node]
    set open_ports($s) $num_ports
}

for {set h 1} {$h <= $num_hosts} {incr h} {
    lappend links_storage [$ns duplex-link $hosts($h) $switches($h) 1Gb 0ms DropTail]
    incr open_ports($h) -1
}

while {$switches_left > 1 && $consec_fails < 20} {
    set s1 [expr round((rand() * ($num_switches - 1)) + 1)]
    while {[expr $open_ports($s1) == 0]} {
        set s1 [expr round((rand() * ($num_switches - 1)) + 1)]
    }

    set s2 [expr round((rand() * ($num_switches - 1)) + 1)]
    while {[expr $open_ports($s2) == 0 || $s1 == $s2]} {
        set s2 [expr round((rand() * ($num_switches - 1)) + 1)]
    }

    if {$s1 > $s2} {
        set tmp $s1
        set s1 $s2
        set s2 $tmp
    }

    if {[lsearch $links_to $s1] != -1 && [lsearch $links_from $s2] != -1 && [lsearch $links_to $s1] == [lsearch $links_from $s2]} {
        incr consec_fails
    } else {
        set consec_fails 0

        # Append and flip
        lappend links_to $s1
        lappend links_from $s2

        incr open_ports($s1) -1
        incr open_ports($s2) -1

        if {[expr $open_ports($s1) == 0]} {
            incr switches_left -1
        }

        if {[expr $open_ports($s2) == 0]} {
            incr switches_left -1
        }
    }
}

foreach s1 $links_to s2 $links_from {
    set links($link_counter) [$ns duplex-link $switches($s1) $switches($s2) 1Gb 0ms DropTail]
    incr link_counter
}

# proc randelem {list} {
#     lindex $list [expr {int(rand()*[llength $list])}]
# }
# 
# if {switches_left > 0} {
#     for {set s 1} {$s <= $num_switches} {incr s} {
#         while {open_ports($s) > 1} {
#             while {1} {
#                 set r_link [randelem $links]
# 
#                 set links [lsearch -inline -all -not -exact $links $r_link]
#                 lappend linksj
# 
#                 incr open_ports($i) -2
#                 break
#             }
#         }
#     }
# }

# if {$switches_left > 0} {
    # Use static IP routing
    $ns rtproto Static
    
    # Run
    $ns run
# }
