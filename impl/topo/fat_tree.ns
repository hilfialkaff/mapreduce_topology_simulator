# Input Emulab definitions
source tb_compat.tcl

# Create the simulator object
set ns [new Simulator]

array set nodes {}
array set links {}
set link_counter 0
set ports 4

set core_sws_min 1
set core_sws_max [expr $ports/2 + 1]
set agg_sws_min [expr $ports/2]
set agg_sws_max [expr $ports]
set edge_sws_min 0
# set edge_sws_max [expr $ports/2]
set edge_sws_max [expr $ports/2 - 1]
set host_min 2
set host_max [expr $ports/2 + 2]

proc setup_node {node_id} {
    tb-set-hardware $node_id pc3000
    # UBUNTU12-64-STD
    tb-set-node-os $node_id UBUNTU10-STD
    tb-set-node-startup $node_id "/proj/uiucnet/exp/tomography/src/_init.sh"

    # equivalent to "mkextrafs /mnt/extra" on node i.
    # set bs($p) [$ns blockstore]
    # $bs($p) set-class "local"
    # $bs($p) set-size "100GB"
    # $bs($p) set-placement "nonsysvol"
    # $bs($p) set-mount-point "/mnt/extra"
    # $bs($p) set-node $client($p)

}

proc setup_router {node_id} {
    tb-set-hardware $node_id pc850
}

for {set p 0} {$p < $ports} {incr p} {
    for {set e $edge_sws_min} {$e < $edge_sws_max} {incr e} {
        set edge_id "se"
        append edge_id $p
        append edge_id $e
        append edge_id "1"

        if {![info exist nodes($edge_id)]} {
            set nodes($edge_id) [$ns node]
        }

        for {set h $host_min} {$h < $host_max} {incr h} {
            set host_id "h"
            append host_id $p
            append host_id $e
            append host_id $h

            if {![info exist nodes($host_id)]} {
                set nodes($host_id) [$ns node]
                setup_node $nodes($host_id)
            }
            set links($link_counter) [$ns duplex-link $nodes($edge_id) $nodes($host_id) 1Gb 0ms DropTail]
            incr link_counter
        }

        for {set a $agg_sws_min} {$a < $agg_sws_max} {incr a} {
            set agg_id "sa"
            append agg_id $p
            append agg_id $a
            append agg_id "1"

            if {![info exist nodes($agg_id)]} {
                set nodes($agg_id) [$ns node]
            }
            set links($link_counter) [$ns duplex-link $nodes($agg_id) $nodes($edge_id) 1Gb 0ms DropTail]
            incr link_counter
        }
    }

    for {set a $agg_sws_min} {$a < $agg_sws_max} {incr a} {
        set agg_id "sa"
        append agg_id $p
        append agg_id $a
        append agg_id "1"

        set c_index [expr $a - $ports/2 + 1]

        for {set c $core_sws_min} {$c < $core_sws_max} {incr c} {
            set core_id "sc"
            append core_id $ports
            append core_id $c_index
            append core_id $c

            if {![info exist nodes($core_id)]} {
                set nodes($core_id) [$ns node]
            }
            set links($link_counter) [$ns duplex-link $nodes($agg_id) $nodes($core_id) 1Gb 0ms DropTail]
            incr link_counter
        }
    }
}

# Use static IP routing
$ns rtproto Static

# Run
$ns run
